の た め の 

-VRam starts at 0x05c00000
-Sprites and their addresses found in VDP1 viewer

-TITLE#.bin files have look up tables starting at 200
-This gets loaded in at 6C59390

-InitialDialog_HWRam.bin, check out 0x000537BF, looks like a refrence to a kanji character.  Kanji character stored at 0x05c0A300

0006C680

//DialogAll1.bin
Found a match in 0100.BIN    @0x00204000
Found a match in 0100FCE.BIN @0x00251000
Found a match in 0100KNJ.BIN @0x05c03000

Found a match in 0100TBL.BIN @0x00224000 <----Text (check out @0x000017d8 for "... ... ... ... ... ... ... ...") 
                                                              Loaded at 0x002257d8

Found a match in ADVSE1 @0x05a54040
Found a match in NC3250.BIN @0x002d8000
Found a match in NCOBJ.BIN @0x0028d2a0
Found a match in TMAP.BIN @0x05e00000
Found a match in TMAP0.BIN @0x05e00000
Found a match in TMAP1H.BIN @0x05e11800
Found a match in TMAP2AH.BIN @0x05e23000
Found a match in TMAPSP.BIN @0x00244000

0100KNJ.BIN is full font sheet (16x16 characters at 4pp 128byte blocks)
NC3250.BIN contains the palettes @410 512bytes
BG2250.BIN has palettes @a250 512 bytes
Sakura and Icatall.bin has palettes at 59ad2 and 6000. 256 bytes
KABE00.BIN palettes @0x00000180
WALL1.BIN palettes @0x00000180
MINICOOK.BIN palettes @0x0007a130

-Text strings are stored as indices into font sheet in RowXColumn format. (Row*16+Column)*128 gets you the character.

Search for this in LWRam: (the 0513 is a reference to the second line of text)
271404B3
271504DE
27160504
27170513 

-Num[k+1] - Num[k] = length of string k
00df 00e0 00e1 00bb 00e2 00e3 00e4 004b 00e5 002b 00e6 00e7 00 00 00

Start counting from:
9C430053 to figure out which word you are on, including this number.  Each string has this 4byte data associated with it.

-First 2bytes are the offset at which strings start.  The value has to be multiplied by 2.
-Second 2bytes * 2 are the end of the text string block.

StringInfo: mOffsetFromPrevString = prevStringOffset + stringLength + 3  

//Tile Size
@ 0x06014410
0210 -> convert to 0108

06001F7A has the dimensions of the sprite (0108, 0210, etc.)
06001F7C has coordinate x
06006e0e writes to 06065e7C the x position of the text sprite

060144e5 is the spacing size

This lives in SAKURA:
 0x000104e5 for X
 0x000104D7 for Y
 0x00010746 for X
 0x00010733 for Y
 
Spacing X for LIPS 
 0x0001066B
 
 Sprite drawing code in SAKURA:
 00010404
 0001040A is sprite size (2 bytes).  X/8, Y
 
 Sprite drawing code for LIPS event
 
 0601466A -> 06001F64 -> 06065EDC-> 05C0010C
 
Main menu sprite code:
LOGO.SH2 
000061e8
05C00088
06065E58
06001F54
0020A200

00208804

0020A1EC

Main Menu Font Loaded at 0x060d0380

Letter 'C' in ENDING.BIN a 0x0000c398
Part of 'C' is in LOGO.SH2 0x00010112 <-Try messing with the values here and then see how it affects VDP1.  Loaded at 0x00214112 at run time.
Compression expanding into 0x060d0380

Loaded During Main Menu:
OPSAKURA.CPK @0x06080000
TITLESE @0x05a54040

To find the location of a palette, look at the entry in VDP1, remove the left most value and multiply the rest by 2. (C510 -> 510*2 -> A20)

In 0100.BIN, 2B8000xxxx where xxxx is an id for the character portrait
At the top of FCE files are are 2byte indexes to the images.
-Todo, output all FCE files
-Seperate the FCE files into face images for the website
-Fix 0100.bin parsing so that 0001 and 00ff are valid values

Theater text boxes: TMAPS.bin @0x00009780
05c00088
06065e58
06001f88

Theater signs:
SAKURA in the block around 0001EE50
Drawing code at 0001e65c and 00020284

Theater signs: 0001EE50
Width/8,height 07 18
Drawing code: c510 7a68

An image lives at 8f40 in TMAPSP.BIN
Sakura specifies the offset as 11E8.
11e8 * 8 = 8f40

Sakura has size and addresses/8 for images in TMAPSP.BIN

TBL files can be max 131072 bytes

FCE load address at SAKURA:00018128

EmptyRoom image lives in SAKURA @ 0x00058d10