の た め の 

-VRam starts at 0x05c00000
-Sprites and their addresses found in VDP1 viewer

-TITLE#.bin files have look up tables starting at 200
-This gets loaded in at 6C59390

-InitialDialog_HWRam.bin, check out 0x000537BF, looks like a refrence to a kanji character.  Kanji character stored at 0x05c0A300

0006C680

//DialogAll1.bin
Found a match in 0100.BIN    @0x00204000
Found a match in 0100FCE.BIN @0x00251000
Found a match in 0100KNJ.BIN @0x05c03000

Found a match in 0100TBL.BIN @0x00224000 <----Text (check out @0x000017d8 for "... ... ... ... ... ... ... ...") 
                                                              Loaded at 0x002257d8

Found a match in ADVSE1 @0x05a54040
Found a match in NC3250.BIN @0x002d8000
Found a match in NCOBJ.BIN @0x0028d2a0
Found a match in TMAP.BIN @0x05e00000
Found a match in TMAP0.BIN @0x05e00000
Found a match in TMAP1H.BIN @0x05e11800
Found a match in TMAP2AH.BIN @0x05e23000
Found a match in TMAPSP.BIN @0x00244000

0100KNJ.BIN is full font sheet (16x16 characters at 4pp 128byte blocks)
NC3250.BIN contains the palettes @410 512bytes
BG2250.BIN has palettes @a250 512 bytes
Sakura and Icatall.bin has palettes at 59ad2 and 6000. 256 bytes
KABE00.BIN palettes @0x00000180
WALL1.BIN palettes @0x00000180
MINICOOK.BIN palettes @0x0007a130

-Text strings are stored as indices into font sheet in RowXColumn format. (Row*16+Column)*128 gets you the character.

Search for this in LWRam: (the 0513 is a reference to the second line of text)
271404B3
271504DE
27160504
27170513 

-Num[k+1] - Num[k] = length of string k
00df 00e0 00e1 00bb 00e2 00e3 00e4 004b 00e5 002b 00e6 00e7 00 00 00

Start counting from:
9C430053 to figure out which word you are on, including this number.  Each string has this 4byte data associated with it.

-First 2bytes are the offset at which strings start.  The value has to be multiplied by 2.
-Second 2bytes * 2 are the end of the text string block.

StringInfo: mOffsetFromPrevString = prevStringOffset + stringLength + 3  

//Tile Size
@ 0x06014410
0210 -> convert to 0108

06001F7A has the dimensions of the sprite (0108, 0210, etc.)
06001F7C has coordinate x
06006e0e writes to 06065e7C the x position of the text sprite

060144e5 is the spacing size

This lives in SAKURA:
 0x000104e5 for X
 0x000104D7 for Y
 0x00010746 for X
 0x00010733 for Y
 
Spacing X for LIPS 
 0x0001066B
 
 Sprite drawing code in SAKURA:
 00010404
 0001040A is sprite size (2 bytes).  X/8, Y
 
 Sprite drawing code for LIPS event
 
 0601466A -> 06001F64 -> 06065EDC-> 05C0010C
 
Main menu sprite code:
LOGO.SH2 
000061e8
05C00088
06065E58
06001F54
0020A200

00208804

0020A1EC

Main Menu Font Loaded at 0x060d0380

Letter 'C' in ENDING.BIN a 0x0000c398
Part of 'C' is in LOGO.SH2 0x00010112 <-Try messing with the values here and then see how it affects VDP1.  Loaded at 0x00214112 at run time.
Compression expanding into 0x060d0380

Text codes in LOGO.SH2 @ 0x000061E8.  0020A1E0 in memory. 001000100070 where 70 is the index into the font sheet.  The index is 0 based and is multiplied by 16.

End of LOGO.SH2 is @0x00204000 in memory.  The offset is specified in LOGO.SH2 @0x0000420C( value is 0023F604).  @0x0020820C in memory.
Also need to fix 0x0a2d6a08 in SAKURA4 ?  
LOGO.SH2 has a pointer: 0023F640 which will end up writing into our buffer. Fix that shit.
-Something is reading the addresses 0023618C and 0023616C and doing something with them.  Those addresses hold the original compressed data.

-Compressed font sheet loaded at 0x00213F20 in memory and ends at 0x0021489D
-Image after font sheet is at 0x00010808 in LOGO.SH2 and 0x00214808 in memory

-Compression Results for MainMenu Bgnd image: Found: 00010808 00000000 Size: 31616 CompressedSize: 4260
-Palette is @0x00029124 and is 512 bytes

-During options, SAKURA is loaded @0x06004000
-Options image is in SAKURA file:
Found: 0005ae38 00000000 Size: 20735 CompressedSize: 1255
-Compressed data is loaded in memory @0x0605EE38.  Pointer is in SAKURA @0x00039C58 (0x0603dba0, 0x0603dc58 in memory).  Uncompresses into 0x060E0000
-Palette @ 0x0005AD98
-Imediatley after this, the font arrows start @0x060FF320 in memory.  That is, 0x4E8 bytes from start of options image. Pointer is @0x0603dc64 in memory.
-Some of the font sheet is @0x00059700 in SAKURA (compressed).  Length is 376.  Loaded into memory@ 0x0605d700.  Pointer in memory @0x0603DBC4.  Uncompressed into 060F6000.  Arrow starts at 060F6200. In VPD1 0x05C6c280.  Whats writing into vdp1?
-Compressed data ends @060e0000
-SAKURA data ends in memory @0x06063A2A

-Steps to patch logo file:
1)Create font sheet
2)Convert font sheet to saturn format
3)Compress font sheet
4)Overwrrite logo.sh2 and offset the non-fontsheet data as needed
5)Modify character entries at 0x000061E8
Loaded During Main Menu:
OPSAKURA.CPK @0x06080000
TITLESE @0x05a54040

To find the location of a palette, look at the entry in VDP1, remove the left most value and multiply the rest by 2. (C510 -> 510*2 -> A20)

In 0100.BIN, 2B8000xxxx where xxxx is an id for the character portrait
At the top of FCE files are are 2byte indexes to the images.
-Todo, output all FCE files
-Seperate the FCE files into face images for the website
-Fix 0100.bin parsing so that 0001 and 00ff are valid values

Theater text boxes: TMAPS.bin @0x00009780
05c00088
06065e58
06001f88

Theater signs:
SAKURA in the block around 0001EE50
Drawing code at 0001e65c and 00020284

Theater signs: 0001EE50
Width/8,height 07 18
Drawing code: c510 7a68

An image lives at 8f40 in TMAPSP.BIN
Sakura specifies the offset as 11E8.
11e8 * 8 = 8f40

Sakura has size and addresses/8 for images in TMAPSP.BIN

TBL files can be max 131072 bytes

FCE load address at SAKURA:00018128

EmptyRoom image lives in SAKURA @ 0x00058d10

LIPS Spacing:
06014612 <<---- Shifts by 2, need to shift by 1 by chaning the code to 4108 to 4104

Battle Dialog Fonts:
Found a match in ENDING.BIN @0x00010c98
Found a match in M01MES.FNT @0x00000500
Found a match in M02MES.FNT @0x00000500
Found a match in M03MES.FNT @0x00000880
Found a match in M04MES.FNT @0x00000680
Found a match in M05MES.FNT @0x00000700
Found a match in M06MES.FNT @0x00000900
Found a match in M07MES.FNT @0x00000a80
Found a match in M08MES.FNT @0x00000b80
Found a match in M09MES.FNT @0x00000500
Found a match in M10MES.FNT @0x00000380
Found a match in M11MES.FNT @0x00000700
Found a match in M21MES.FNT @0x00000580
Found a match in M22MES.FNT @0x00000900
Found a match in MINIHANA.BIN @0x00092c10
Found a match in MINISHOT.BIN @0x00055d10
Found a match in MINISWIM.BIN @0x0003cd28

Battle Dialog Memory Layout:
Found a match in WKL01.BIN @0x0021f800
Found a match in FACE01.BIN @0x002b3800
Found a match in M01MES.BIN @0x002dd800
Found a match in M01MES.FNT @0x002ce800
Found a match in WAKIJI.SE @0x05a69bf0
Found a match in K014.BIN @0x06078000
Found a match in EVS01001.BIN @0x060c0000
Found a match in EVS01002.BIN @0x060c0a9c
Found a match in PCMSE.BIN @0x060e8000

Battle Font in WKL01 around 0x00035628

EVT loaded @204000

Battle Dialog Order:
EVT01 @ 0x00012140. (00216140 in memory)
2 Byte FaceID
2 Byte DialogIndex

Example (#, dialog index, face id):
3  b6 0112
4  b7  0116
5  b8 011c
6  b9 0106
7  bb8 001d
8  bb9 0106
9  bba
10 bbb
11 bbc
12 bbd
13 bbe
14 bbf
15 bc0
26 2717
27 2718
92 4e20

Face drawing code is in SLG files:
Found a match in 0SLG.BIN @0x000142a8
Found a match in 0SLG.BIN @0x00014436
Found a match in SLG.BIN @0x000142a8
Found a match in SLG.BIN @0x00014436
Around: 0510FF17

EVT files have a header up top.  The lookup value associated with each image looks into a table in the EVT file at 0x00011E94.  
That value refers to the index at the top of the FACE file.  The index at the top of the FACE file has the address of the image desired.

Subtitle text: first image compressed @.x000196db

Battle Dialog extra text in SLG.BIN and 0SLG.BIN @ 00045e50 (In mem @06049e50)
In memory during battle:
EVS01001.BIN @0x060c0000
EVS01003.BIN @0x060c0a9c
FACE01.BIN @0x002b3800
K002.BIN @0x06078000
M01MES.BIN @0x002dd800
M01MES.FNT @0x002ce800
PCMSE.BIN @0x060e8000
SUMIRE.SE @0x05a69bf0
WKL01.BIN @0x0021f800

Battle Dialog Text Spacing:
During still text
Add 16 to x @0602567a @0x0002167B in SLG.bin and 0SLG.bin
Add 16 to y @0602565c @0x0002165D in SLG.bin and 0SLG.bin

During moving text
Add 16 to x @06025902 @0x00021903 in SLG.bin and 0SLG.bin
Add 16 to y @060258e0 @0x0002181E in SLG.bin and 0SLG.bin

Note: Something is reading the first image index in FACE01 @002b3802.  Figure that out along with the fact that SLG.BIN has a table for the text id lookup and this might reveal how the face and text id are matched.

EVT string might be a lips string if after the string id there is a pointer (0605)?  Example EVT01.BIN, 4E25 0605

-Dialog LUT being uncompressed into 05C7FF00 from 060198A4
-Compression call is from SLG.BIN and 0SLG.BIN @0x00015990.  That call is hardcoded to look at 060198A4 for the compressed palette.
-Palette is anded with some mask in order to get the actual palette.
-Read 4 bytes into 8 bytes.  And with FFFE000.  Take last 4 bytes.

--Battle Dialog Font Printing Code--
Font sheet is @0x002ce800 in memory
00CED00 <-First character is at this offset
Character code from MES.bin file is read @0x06025944
Put a breakpoint @002DDB56 to see a character being read in
Scrolling: Max characters per line is @06025962 and @0602596A.  The max is 14 characters, 0x0E.  This is @0x00021963 and @0x0002196B in slg.bin.  Max multiplier is 15 which is @06025980 and 0x00021981 in slg.
Still: @06025655 is max, 0x00021655 in SLG.bin
Max lines is specified @0602596D, which is 02.,, 06025974(?, yea I think so)
060258ea mov 0x0f, r1.  Needs to be fixed to max char length (240/font width).  That's at 0x000218EB in SLG.BIN

002DDB80 <-start of ha ha ha 
06068734 <-002DDB80 written here
Code: 0x06025A90 <-Writes 002DFB7F to 06068734
Code: 0x06025B4C reads 0x06025B78[002DD800] which is the start of the MES file.
Code: 0x00625B2A reads from 06025B88[002F8000] which is the end of the MES data section.  Reads into R7, R7 eventually becomes 002DFB7F which is the start of the character info section for the third dialog entry.

Code: 0x06025B54 <-Calculates the start of the character info [should be 002E1DD0 for translated data]
The second two bytes in the string info at the top of the MES file indicates how many characters to skip in order to get to the character info of this line of dialog. 0004 0000

Battle dialog is loaded @002dd800.  Character speed starts at 002E1DF0 (2DFB40 unpatched).  Read 002DFB80 in unpatched version.
Dialog is rendered as a continous block of text. When 0A0D is encountered, the reading of the image jumps by the (stride - num characters printed)

Battle dialog LIPS:
000217bf needs to be 0x1E instead of 0x0F.  This is the stride of the line of text in vdp1 memory.  

---Battle Menu---
0026C51A <-compressed name for Sakura during battle found in:
00265C1A
06068C06

Found a match in WKL01.BIN @0x0004cd1a
Found a match in WKL02.BIN @0x000529b2
Found a match in WKL03.BIN @0x0005242a
Found a match in WKL04.BIN @0x00051f2a
Found a match in WKL05.BIN @0x0005206a
Found a match in WKL06.BIN @0x0004e3da
Found a match in WKL07.BIN @0x00051752
Found a match in WKL08.BIN @0x0004dc52
Found a match in WKL09.BIN @0x00052f6a
Found a match in WKL10.BIN @0x0004e96a
Found a match in WKL11.BIN @0x000579e6
Found a match in WKL21.BIN @0x00048896
Found a match in WKL21.BIN @0x00049b4e
Found a match in WKL22.BIN @0x000534e6
Found a match in WKL22.BIN @0x0005479e

WKL file:
-Loaded @0x0021F800
-Uncompressed @06068BF0
-Uncompressed Data Deader:
   -In the first 16 bytes, first two bytes specify the number of images
   -For each image, there are 16 bytes of info.  short Width, short Height, short unknown, short unknown2, 
512 header
-Palette for "Sakura" image is  @00073D18
-Palette offset is specified at @0x278

Stats image:
-Header @0336f8 [0000000E0 IN WKL01] points to another header
-In this second header, the third entry is an offset [35b0] to another header.
-In this third header, the stats image us tge second entry

Stats image palette:
Found a match in 0SLG.BIN @0x00011b78
Found a match in SLG.BIN @0x00011b78

:For image next to character number:
-Data block is pointed to at index 0xE8 in the wkl header
-Data block header is [uint offset, uint size]
-The index to the next block is at index 3
-This block starts with a 2 byte entry saying how many images
-8 bytes later the image data starts
-Image Data[uint offset, uint size, ushort width, ushort height, uint unknown]

:Battle Mech Palette:
-Written to 0605BEA0 from 00286B1C.  The data appears to be offset in the patched file.  Should be read from 0006730a in WKL01.bin

:Battle Cursor:
In SLG @0x000127dc, 25c04000 is the start of the cursor write address

06016428
060167E0 <- read from here and get 06016428(where the cursor image data is)
060167D4 <- read close to where the vdp1 address for the cursor is calculated

:Fix Addresses in SLG files for Battle UI:
//Modify this by the size different of the wkl data to have the cursor image be written to the correct address
In SLG.bin @00014528[06018528] 25C1500 is specified.
In SLG.bin @000140f0[060180F0] 00015D80, VDP1 offset at which compressed battle ui is written.
In SLG.bin @00014058[06018058] 25c15d80 (other VDP1 offset for the compressed battle ui address).

@0601844C [@0001444C], 2A20 is specified.  This is the VDP1 offset(00015100/8) at which images after the cursor start.
SLG.bin @000142A6 & @00014434 Blink image written to 05c15B00 [2B60 when divided by 8] and 05c15880 [2B10 when divided by 8]